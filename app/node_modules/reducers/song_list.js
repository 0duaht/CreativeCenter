import React, { Component } from 'react';
import { ListView } from 'react-native';
import Types from 'constants/types';

const dsNewSongs = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 != r2});
const dsPopSongs = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 != r2});
const dsAllNewSongs = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 != r2});
const dsAllPopSongs = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 != r2});

const initialState = {
  newSongs: {
    songs: dsNewSongs.cloneWithRows([]),
    loading: false,
    error: false,
    errorMessage: ''
  },

  allNewSongs: {
    songs: dsAllNewSongs.cloneWithRows([]),
    loading: false,
    error: false,
    errorMessage: ''
  },

  popularSongs: {
    songs: dsPopSongs.cloneWithRows([]),
    loading: false,
    error: false,
    errorMessage: ''
  },

  allPopularSongs: {
    songs: dsAllPopSongs.cloneWithRows([]),
    loading: false,
    error: false,
    errorMessage: ''
  }
}

module.exports = (state=initialState, action) => {
  switch(action.type){
    case Types.REQUEST_NEW_SONGS: {
      return Object.assign(
        {}, state, {
          newSongs: Object.assign({}, state.newSongs, { loading: true, error: false })
        }
      );
    }

    case Types.RECEIVE_NEW_SONGS: {
      return Object.assign(
        {}, state, {
          newSongs: Object.assign({}, state.newSongs, { loading: false, error: false, songs: dsNewSongs.cloneWithRows(action.payload) })
        }
      );
    }

    case Types.NEW_SONGS_ERROR: {
      return Object.assign(
        {}, state, {
          newSongs: Object.assign({}, state.newSongs, { loading: false, error: true, errorMessage: action.payload })
        }
      );
    }

    case Types.REQUEST_ALL_NEW_SONGS: {
      return Object.assign(
        {}, state, {
          allNewSongs: Object.assign({}, state.allNewSongs, { loading: true })
        }
      );
    }

    case Types.RECEIVE_ALL_NEW_SONGS: {
      return Object.assign(
        {}, state, {
          allNewSongs: Object.assign({}, state.allNewSongs, { loading: false, error: false, songs: dsAllNewSongs.cloneWithRows(action.payload) })
        }
      );
    }

    case Types.ALL_NEW_SONGS_ERROR: {
      return Object.assign(
        {}, state, {
          allNewSongs: Object.assign({}, state.allNewSongs, { loading: false, error: true, errorMessage: action.payload })
        }
      );
    }

    case Types.REQUEST_POPULAR_SONGS: {
      return Object.assign(
        {}, state, {
          popularSongs: Object.assign({}, state.popularSongs, { loading: true })
        }
      );
    }

    case Types.RECEIVE_POPULAR_SONGS: {
      return Object.assign(
        {}, state, {
          popularSongs: Object.assign({}, state.popularSongs, { loading: false, error: false, songs: dsPopSongs.cloneWithRows(action.payload) })
        }
      );
    }

    case Types.POPULAR_SONGS_ERROR: {
      return Object.assign(
        {}, state, {
          popularSongs: Object.assign({}, state.popularSongs, { loading: false, error: true, errorMessage: action.payload })
        }
      );
    }

    case Types.REQUEST_ALL_POPULAR_SONGS: {
      return Object.assign(
        {}, state, {
          allPopularSongs: Object.assign({}, state.allPopularSongs, { loading: true })
        }
      );
    }

    case Types.RECEIVE_ALL_POPULAR_SONGS: {
      return Object.assign(
        {}, state, {
          allPopularSongs: Object.assign({}, state.allPopularSongs, { loading: false, error: false, songs: dsAllPopSongs.cloneWithRows(action.payload) })
        }
      );
    }

    case Types.ALL_POPULAR_SONGS_ERROR: {
      return Object.assign(
        {}, state, {
          allPopularSongs: Object.assign({}, state.allPopularSongs, { loading: false, error: true, errorMessage: action.payload })
        }
      );
    }

    default:
      return state;
  }
}