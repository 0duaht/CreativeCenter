{
  "_args": [
    [
      {
        "raw": "../react-native-tab-view",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "../react-native-tab-view",
        "spec": "/Users/madara/Documents/react-native/react-native-tab-view",
        "type": "directory"
      },
      "/Users/madara/Documents/react-native/CreativeCenter"
    ]
  ],
  "_from": "../react-native-tab-view",
  "_id": "react-native-tab-view@0.0.37",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-native-tab-view",
  "_phantomChildren": {},
  "_requested": {
    "raw": "../react-native-tab-view",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "../react-native-tab-view",
    "spec": "/Users/madara/Documents/react-native/react-native-tab-view",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../react-native-tab-view",
  "_shasum": "3b611e559c71a0634f368a0fe8b6d81cfdc5f1e2",
  "_shrinkwrap": null,
  "_spec": "../react-native-tab-view",
  "_where": "/Users/madara/Documents/react-native/CreativeCenter",
  "author": {
    "name": "Satyajit Sahoo",
    "email": "satyajit.happy@gmail.com",
    "url": "https://github.com/satya164/"
  },
  "bugs": {
    "url": "https://github.com/satya164/react-native-tabview/issues"
  },
  "dependencies": {},
  "description": "Tab view component for React Native",
  "devDependencies": {
    "react": "latest",
    "react-addons-shallow-compare": "latest",
    "react-native": "latest"
  },
  "files": [
    "src/"
  ],
  "gitHead": "c610b7b6c1bba8ac3c38b357bef75866ae87b56a",
  "homepage": "https://github.com/satya164/react-native-tabview#readme",
  "keywords": [
    "react-native-component",
    "react-component",
    "react-native",
    "ios",
    "android",
    "tab",
    "swipe",
    "scrollable",
    "coverflow"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "react-native-tab-view",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "*",
    "react-native": "*",
    "react-addons-shallow-compare": "*"
  },
  "readme": "React Native Tab View\n=====================\n\nA cross-platform Tab View component for React Native.\n\nThis is a JavaScript-only implementation of swipeable tab views. It's super customizable, allowing you to do things like coverflow.\n\n- [Run the\nexample app to see it in\naction](https://getexponent.com/@rncommunity/react-native-tab-view-demos).\n- Checkout the [example/](https://github.com/react-native-community/react-native-tab-view/tree/master/example) folder for source code.\n\n## Features\n\n- Smooth animations and gestures\n- Scrollable tabs\n- Both top and bottom tab bars\n- Follows Material Design spec\n- Highly customizable\n\n## Demo\n\n<a href=\"https://raw.githubusercontent.com/satya164/react-native-tab-view/master/demo/demo.mp4\"><img src=\"https://raw.githubusercontent.com/satya164/react-native-tab-view/master/demo/demo.gif\" width=\"360\"></a>\n\n\n## Installation\n\n```sh\nnpm install --save react-native-tab-view react-addons-shallow-compare\n```\n\n\n## Example\n\n```js\nimport React, { Component } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { TabViewAnimated, TabBarTop } from 'react-native-tab-view';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  page: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default class TabViewExample extends Component {\n  state = {\n    index: 0,\n    routes: [\n      { key: '1', title: 'First' },\n      { key: '2', title: 'Second' },\n    ],\n  };\n\n  _handleChangeTab = (index) => {\n    this.setState({ index });\n  };\n\n  _renderHeader = (props) => {\n    return <TabBarTop {...props} />;\n  };\n\n  _renderScene = ({ route }) => {\n    switch (route.key) {\n    case '1':\n      return <View style={[ styles.page, { backgroundColor: '#ff4081' } ]} />;\n    case '2':\n      return <View style={[ styles.page, { backgroundColor: '#673ab7' } ]} />;\n    default:\n      return null;\n    }\n  };\n\n  render() {\n    return (\n      <TabViewAnimated\n        style={styles.container}\n        navigationState={this.state}\n        renderScene={this._renderScene}\n        renderHeader={this._renderHeader}\n        onRequestChangeTab={this._handleChangeTab}\n      />\n    );\n  }\n}\n```\n\n\n## API\n\nThe package exposes the following components,\n\n### `<TabViewTransitioner />`\n\nContainer component responsible for managing tab transitions\n\nIt accepts the following props,\n- `navigationState` - the current navigation state\n- `configureTransition` - optional callback which returns a configuration for the transition, return `null` to disable animation\n- `canJumpToTab` - optional callback which accepts a route, and returns a boolean indicating whether jumping to the tab is allowed\n- `onRequestChangeTab` - callback for when the current tab changes, should do the `setState`\n- `onChangePosition` - callback called with position value as it changes (e.g. - on swipe or tab change), avoid doing anything expensive here\n- `shouldOptimizeUpdates` - whether to implement a `shouldComponentUpdate` strategy to minimize updates, enabled by default\n- `render` - callback which renders the tab view, gets a special set of props as argument\n\n### `<TabViewAnimated />`\n\nA convenience wrapper around `<TabViewTransitioner />`\n\nIt accepts the following props in addition to all the props accepted by `<TabViewTransitioner />` (except `render`),\n- `renderPager` - optional callback which renders a pager responsible for handling swipes\n- `renderHeader` - optional callback which renders a header, useful for a top tab bar\n- `renderFooter` - optional callback which renders a footer, useful for a bottom tab bar\n- `renderScene` - callback which renders a single scene\n- `lazy` - whether to load tabs lazily when you start switching\n\n### `<TabViewPagerPan />`\n\nPager component based on `PanResponder` (default)\n\nIt accepts the following props,\n- `swipeEnabled` - whether to enable swipe gestures\n- `swipeDistanceThreshold` - minimum swipe distance to trigger page switch\n- `swipeVelocityThreshold` - minimum swipe velocity to trigger page switch\n- `children` - React Element(s) to render\n\n### `<TabViewPagerScroll />`\n\nPager component based on `ScrollView`\n\nIt accepts the following props,\n- `swipeEnabled` - whether to enable swipe gestures\n- `children` - React Element(s) to render\n\n### `<TabViewPagerAndroid />`\n\nPager component based on `ViewPagerAndroid`\nIt accepts the following props,\n- `swipeEnabled` - whether to enable swipe gestures\n- `children` - React Element(s) to render\n\n### `<TabBar />`\n\nBasic tab bar\n\nIt accepts the following props,\n- `renderIcon` - optional callback which receives the current scene and returns a React Element to be used as a icon\n- `renderLabel` - optional callback which receives the current scene and returns a React Element to be used as a label\n- `renderIndicator` - optional callback which receives the current scene and returns a React Element to be used as a tab indicator\n- `renderBadge` - optional callback which receives the current scene and returns a React Element to be used as a badge\n- `onTabPress` - optional callback invoked on tab press, useful for things like scroll to top\n- `pressColor` - color for material ripple (Android >= 5.0 only)\n- `activeOpacity` - opacity for pressed tab (iOS and Android < 5.0 only)\n- `scrollEnabled` - whether to enable scrollable tabs\n- `tabWidth` - optional custom tab width for scrollable tabs\n- `tabStyle` - style object for the tab\n\n### `<TabBarTop />`\n\nMaterial design themed top tab bar\n\nIt accepts the following props in addition to the props accepted by `<TabBar />`,\n- `renderLabel` - optional callback which receives the current scene and returns a React Element to be used as a label\n- `indicatorStyle` - style object for the tab indicator\n- `labelStyle` - style object for the tab label\n\n\nCheck the [type definitions](src/TabViewTypeDefinitions.js) for details on shape of different objects.\n\n\n## Caveats\n\n`<TabViewAnimated />` and `<TabViewTransitioner />` implement `shouldComponentUpdate` to prevent unnecessary re-rendering. As a side-effect, the tabs won't re-render if something changes in the parent's state. If you need it to trigger a re-render, put it in the `navigationState`.\n\nFor example, consider you have a `loaded` property on state which should trigger re-render. You can have your state like the following -\n\n```js\nstate = {\n  index: 0,\n  routes: [\n    { key: '1', title: 'First' },\n    { key: '2', title: 'Second' },\n  ],\n  loaded: false,\n}\n```\n\nThen pass `this.state` as the `navigationState` prop to `<TabViewAnimated />` or `<TabViewTransitioner />`.\n\n\n```js\n<TabViewAnimated\n  navigationState={this.state}\n  renderScene={this._renderPage}\n  renderHeader={this._renderHeader}\n  onRequestChangeTab={this._handleChangeTab}\n/>\n```\n\n\n## Optimization Tips\n\n- The `renderScene` function is called every time the index changes. If your `renderScene` function is expensive, it's good idea move it to a separate component if your `renderScene` function doesn't depend on the index, and apply `shouldComponentUpdate` to prevent unnecessary re-renders.\n- If you've a large number of routes, especially images, it can slow the animation down a lot. You can instead render a limited number of routes. In your `renderScene` function, do the following to render only 2 routes on each side,\n\n  ```js\n  renderScene = ({ route }) => {\n    if (Math.abs(this.state.navigation.index - this.state.navigation.routes.indexOf(route)) > 2) {\n      return null;\n    }\n\n    return <MySceneComponent route={route} />;\n  };\n  ```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/satya164/react-native-tabview.git"
  },
  "scripts": {
    "flow": "flow",
    "lint": "eslint src/**/*.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.0.37"
}
